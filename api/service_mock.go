// Code generated by MockGen. DO NOT EDIT.
// Source: com.capturetweet/api (interfaces: UserService,TweetService,SearchService,BrowserService,ContentService)

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	anaconda "github.com/ChimeraCoder/anaconda"
	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockUserService) FindById(arg0 context.Context, arg1 string) (*UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserServiceMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserService)(nil).FindById), arg0, arg1)
}

// FindOrCreate mocks base method.
func (m *MockUserService) FindOrCreate(arg0 context.Context, arg1 *anaconda.User) (*UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreate", arg0, arg1)
	ret0, _ := ret[0].(*UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreate indicates an expected call of FindOrCreate.
func (mr *MockUserServiceMockRecorder) FindOrCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreate", reflect.TypeOf((*MockUserService)(nil).FindOrCreate), arg0, arg1)
}

// MockTweetService is a mock of TweetService interface.
type MockTweetService struct {
	ctrl     *gomock.Controller
	recorder *MockTweetServiceMockRecorder
}

// MockTweetServiceMockRecorder is the mock recorder for MockTweetService.
type MockTweetServiceMockRecorder struct {
	mock *MockTweetService
}

// NewMockTweetService creates a new mock instance.
func NewMockTweetService(ctrl *gomock.Controller) *MockTweetService {
	mock := &MockTweetService{ctrl: ctrl}
	mock.recorder = &MockTweetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweetService) EXPECT() *MockTweetServiceMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockTweetService) FindById(arg0 context.Context, arg1 string) (*TweetModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*TweetModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTweetServiceMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTweetService)(nil).FindById), arg0, arg1)
}

// Search mocks base method.
func (m *MockTweetService) Search(arg0 context.Context, arg1 string, arg2, arg3, arg4 int) ([]TweetModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]TweetModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockTweetServiceMockRecorder) Search(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockTweetService)(nil).Search), arg0, arg1, arg2, arg3, arg4)
}

// SearchByUser mocks base method.
func (m *MockTweetService) SearchByUser(arg0 context.Context, arg1 string) ([]TweetModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByUser", arg0, arg1)
	ret0, _ := ret[0].([]TweetModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByUser indicates an expected call of SearchByUser.
func (mr *MockTweetServiceMockRecorder) SearchByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByUser", reflect.TypeOf((*MockTweetService)(nil).SearchByUser), arg0, arg1)
}

// Store mocks base method.
func (m *MockTweetService) Store(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockTweetServiceMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTweetService)(nil).Store), arg0, arg1)
}

// UpdateLargeImage mocks base method.
func (m *MockTweetService) UpdateLargeImage(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLargeImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLargeImage indicates an expected call of UpdateLargeImage.
func (mr *MockTweetServiceMockRecorder) UpdateLargeImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLargeImage", reflect.TypeOf((*MockTweetService)(nil).UpdateLargeImage), arg0, arg1, arg2)
}

// UpdateThumbImage mocks base method.
func (m *MockTweetService) UpdateThumbImage(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThumbImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThumbImage indicates an expected call of UpdateThumbImage.
func (mr *MockTweetServiceMockRecorder) UpdateThumbImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThumbImage", reflect.TypeOf((*MockTweetService)(nil).UpdateThumbImage), arg0, arg1, arg2)
}

// MockSearchService is a mock of SearchService interface.
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService.
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance.
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockSearchService) Put(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockSearchServiceMockRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockSearchService)(nil).Put), arg0, arg1, arg2, arg3)
}

// Search mocks base method.
func (m *MockSearchService) Search(arg0 context.Context, arg1 string, arg2 int) ([]SearchModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2)
	ret0, _ := ret[0].([]SearchModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchServiceMockRecorder) Search(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchService)(nil).Search), arg0, arg1, arg2)
}

// MockBrowserService is a mock of BrowserService interface.
type MockBrowserService struct {
	ctrl     *gomock.Controller
	recorder *MockBrowserServiceMockRecorder
}

// MockBrowserServiceMockRecorder is the mock recorder for MockBrowserService.
type MockBrowserServiceMockRecorder struct {
	mock *MockBrowserService
}

// NewMockBrowserService creates a new mock instance.
func NewMockBrowserService(ctrl *gomock.Controller) *MockBrowserService {
	mock := &MockBrowserService{ctrl: ctrl}
	mock.recorder = &MockBrowserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrowserService) EXPECT() *MockBrowserServiceMockRecorder {
	return m.recorder
}

// CaptureSaveUpdateDatabase mocks base method.
func (m *MockBrowserService) CaptureSaveUpdateDatabase(arg0 context.Context, arg1 *CaptureRequestModel) (*CaptureResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureSaveUpdateDatabase", arg0, arg1)
	ret0, _ := ret[0].(*CaptureResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CaptureSaveUpdateDatabase indicates an expected call of CaptureSaveUpdateDatabase.
func (mr *MockBrowserServiceMockRecorder) CaptureSaveUpdateDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureSaveUpdateDatabase", reflect.TypeOf((*MockBrowserService)(nil).CaptureSaveUpdateDatabase), arg0, arg1)
}

// CaptureURL mocks base method.
func (m *MockBrowserService) CaptureURL(arg0 context.Context, arg1 *CaptureRequestModel) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureURL", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CaptureURL indicates an expected call of CaptureURL.
func (mr *MockBrowserServiceMockRecorder) CaptureURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureURL", reflect.TypeOf((*MockBrowserService)(nil).CaptureURL), arg0, arg1)
}

// Close mocks base method.
func (m *MockBrowserService) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBrowserServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBrowserService)(nil).Close))
}

// SaveCapture mocks base method.
func (m *MockBrowserService) SaveCapture(arg0 context.Context, arg1 []byte, arg2 *CaptureRequestModel) (*CaptureResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCapture", arg0, arg1, arg2)
	ret0, _ := ret[0].(*CaptureResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCapture indicates an expected call of SaveCapture.
func (mr *MockBrowserServiceMockRecorder) SaveCapture(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCapture", reflect.TypeOf((*MockBrowserService)(nil).SaveCapture), arg0, arg1, arg2)
}

// MockContentService is a mock of ContentService interface.
type MockContentService struct {
	ctrl     *gomock.Controller
	recorder *MockContentServiceMockRecorder
}

// MockContentServiceMockRecorder is the mock recorder for MockContentService.
type MockContentServiceMockRecorder struct {
	mock *MockContentService
}

// NewMockContentService creates a new mock instance.
func NewMockContentService(ctrl *gomock.Controller) *MockContentService {
	mock := &MockContentService{ctrl: ctrl}
	mock.recorder = &MockContentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentService) EXPECT() *MockContentServiceMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockContentService) SendMail(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockContentServiceMockRecorder) SendMail(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockContentService)(nil).SendMail), arg0, arg1, arg2, arg3, arg4)
}
