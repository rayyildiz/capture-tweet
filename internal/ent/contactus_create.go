// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capturetweet.com/internal/ent/contactus"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactUsCreate is the builder for creating a ContactUs entity.
type ContactUsCreate struct {
	config
	mutation *ContactUsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cuc *ContactUsCreate) SetCreatedAt(t time.Time) *ContactUsCreate {
	cuc.mutation.SetCreatedAt(t)
	return cuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuc *ContactUsCreate) SetNillableCreatedAt(t *time.Time) *ContactUsCreate {
	if t != nil {
		cuc.SetCreatedAt(*t)
	}
	return cuc
}

// SetUpdatedAt sets the "updated_at" field.
func (cuc *ContactUsCreate) SetUpdatedAt(t time.Time) *ContactUsCreate {
	cuc.mutation.SetUpdatedAt(t)
	return cuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuc *ContactUsCreate) SetNillableUpdatedAt(t *time.Time) *ContactUsCreate {
	if t != nil {
		cuc.SetUpdatedAt(*t)
	}
	return cuc
}

// SetEmail sets the "email" field.
func (cuc *ContactUsCreate) SetEmail(s string) *ContactUsCreate {
	cuc.mutation.SetEmail(s)
	return cuc
}

// SetFullName sets the "full_name" field.
func (cuc *ContactUsCreate) SetFullName(s string) *ContactUsCreate {
	cuc.mutation.SetFullName(s)
	return cuc
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (cuc *ContactUsCreate) SetNillableFullName(s *string) *ContactUsCreate {
	if s != nil {
		cuc.SetFullName(*s)
	}
	return cuc
}

// SetMessage sets the "message" field.
func (cuc *ContactUsCreate) SetMessage(s string) *ContactUsCreate {
	cuc.mutation.SetMessage(s)
	return cuc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cuc *ContactUsCreate) SetNillableMessage(s *string) *ContactUsCreate {
	if s != nil {
		cuc.SetMessage(*s)
	}
	return cuc
}

// SetID sets the "id" field.
func (cuc *ContactUsCreate) SetID(s string) *ContactUsCreate {
	cuc.mutation.SetID(s)
	return cuc
}

// Mutation returns the ContactUsMutation object of the builder.
func (cuc *ContactUsCreate) Mutation() *ContactUsMutation {
	return cuc.mutation
}

// Save creates the ContactUs in the database.
func (cuc *ContactUsCreate) Save(ctx context.Context) (*ContactUs, error) {
	var (
		err  error
		node *ContactUs
	)
	cuc.defaults()
	if len(cuc.hooks) == 0 {
		if err = cuc.check(); err != nil {
			return nil, err
		}
		node, err = cuc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactUsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuc.check(); err != nil {
				return nil, err
			}
			cuc.mutation = mutation
			if node, err = cuc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cuc.hooks) - 1; i >= 0; i-- {
			if cuc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cuc *ContactUsCreate) SaveX(ctx context.Context) *ContactUs {
	v, err := cuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cuc *ContactUsCreate) Exec(ctx context.Context) error {
	_, err := cuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuc *ContactUsCreate) ExecX(ctx context.Context) {
	if err := cuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuc *ContactUsCreate) defaults() {
	if _, ok := cuc.mutation.CreatedAt(); !ok {
		v := contactus.DefaultCreatedAt()
		cuc.mutation.SetCreatedAt(v)
	}
	if _, ok := cuc.mutation.UpdatedAt(); !ok {
		v := contactus.DefaultUpdatedAt()
		cuc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuc *ContactUsCreate) check() error {
	if _, ok := cuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ContactUs.created_at"`)}
	}
	if _, ok := cuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ContactUs.updated_at"`)}
	}
	if _, ok := cuc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "ContactUs.email"`)}
	}
	if v, ok := cuc.mutation.FullName(); ok {
		if err := contactus.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "ContactUs.full_name": %w`, err)}
		}
	}
	if v, ok := cuc.mutation.Message(); ok {
		if err := contactus.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ContactUs.message": %w`, err)}
		}
	}
	if v, ok := cuc.mutation.ID(); ok {
		if err := contactus.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ContactUs.id": %w`, err)}
		}
	}
	return nil
}

func (cuc *ContactUsCreate) sqlSave(ctx context.Context) (*ContactUs, error) {
	_node, _spec := cuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ContactUs.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (cuc *ContactUsCreate) createSpec() (*ContactUs, *sqlgraph.CreateSpec) {
	var (
		_node = &ContactUs{config: cuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: contactus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: contactus.FieldID,
			},
		}
	)
	if id, ok := cuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cuc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactus.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cuc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactus.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cuc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactus.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := cuc.mutation.FullName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactus.FieldFullName,
		})
		_node.FullName = value
	}
	if value, ok := cuc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactus.FieldMessage,
		})
		_node.Message = value
	}
	return _node, _spec
}

// ContactUsCreateBulk is the builder for creating many ContactUs entities in bulk.
type ContactUsCreateBulk struct {
	config
	builders []*ContactUsCreate
}

// Save creates the ContactUs entities in the database.
func (cucb *ContactUsCreateBulk) Save(ctx context.Context) ([]*ContactUs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cucb.builders))
	nodes := make([]*ContactUs, len(cucb.builders))
	mutators := make([]Mutator, len(cucb.builders))
	for i := range cucb.builders {
		func(i int, root context.Context) {
			builder := cucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactUsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cucb *ContactUsCreateBulk) SaveX(ctx context.Context) []*ContactUs {
	v, err := cucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cucb *ContactUsCreateBulk) Exec(ctx context.Context) error {
	_, err := cucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cucb *ContactUsCreateBulk) ExecX(ctx context.Context) {
	if err := cucb.Exec(ctx); err != nil {
		panic(err)
	}
}
