// Code generated by entc, DO NOT EDIT.

package tweet

import (
	"time"
)

const (
	// Label holds the string label denoting the tweet type in the database.
	Label = "tweet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFullText holds the string denoting the full_text field in the database.
	FieldFullText = "full_text"
	// FieldCaptureURL holds the string denoting the capture_url field in the database.
	FieldCaptureURL = "capture_url"
	// FieldCaptureThumbURL holds the string denoting the capture_thumb_url field in the database.
	FieldCaptureThumbURL = "capture_thumb_url"
	// FieldLang holds the string denoting the lang field in the database.
	FieldLang = "lang"
	// FieldFavoriteCount holds the string denoting the favorite_count field in the database.
	FieldFavoriteCount = "favorite_count"
	// FieldRetweetCount holds the string denoting the retweet_count field in the database.
	FieldRetweetCount = "retweet_count"
	// FieldAuthorID holds the string denoting the author_id field in the database.
	FieldAuthorID = "author_id"
	// FieldResources holds the string denoting the resources field in the database.
	FieldResources = "resources"
	// FieldPostedAt holds the string denoting the posted_at field in the database.
	FieldPostedAt = "posted_at"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// Table holds the table name of the tweet in the database.
	Table = "tweets"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "tweets"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "author_id"
)

// Columns holds all SQL columns for tweet fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFullText,
	FieldCaptureURL,
	FieldCaptureThumbURL,
	FieldLang,
	FieldFavoriteCount,
	FieldRetweetCount,
	FieldAuthorID,
	FieldResources,
	FieldPostedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// FullTextValidator is a validator for the "full_text" field. It is called by the builders before save.
	FullTextValidator func(string) error
	// LangValidator is a validator for the "lang" field. It is called by the builders before save.
	LangValidator func(string) error
	// DefaultFavoriteCount holds the default value on creation for the "favorite_count" field.
	DefaultFavoriteCount int
	// DefaultRetweetCount holds the default value on creation for the "retweet_count" field.
	DefaultRetweetCount int
	// AuthorIDValidator is a validator for the "author_id" field. It is called by the builders before save.
	AuthorIDValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
