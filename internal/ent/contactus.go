// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"capturetweet.com/internal/ent/contactus"
	"entgo.io/ent/dialect/sql"
)

// ContactUs is the model entity for the ContactUs schema.
type ContactUs struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactUs) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactus.FieldID, contactus.FieldEmail, contactus.FieldFullName, contactus.FieldMessage:
			values[i] = new(sql.NullString)
		case contactus.FieldCreatedAt, contactus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ContactUs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactUs fields.
func (cu *ContactUs) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactus.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cu.ID = value.String
			}
		case contactus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cu.CreatedAt = value.Time
			}
		case contactus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cu.UpdatedAt = value.Time
			}
		case contactus.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				cu.Email = value.String
			}
		case contactus.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				cu.FullName = value.String
			}
		case contactus.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				cu.Message = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ContactUs.
// Note that you need to call ContactUs.Unwrap() before calling this method if this ContactUs
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *ContactUs) Update() *ContactUsUpdateOne {
	return (&ContactUsClient{config: cu.config}).UpdateOne(cu)
}

// Unwrap unwraps the ContactUs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *ContactUs) Unwrap() *ContactUs {
	_tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContactUs is not a transactional entity")
	}
	cu.config.driver = _tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *ContactUs) String() string {
	var builder strings.Builder
	builder.WriteString("ContactUs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(cu.Email)
	builder.WriteString(", ")
	builder.WriteString("full_name=")
	builder.WriteString(cu.FullName)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(cu.Message)
	builder.WriteByte(')')
	return builder.String()
}

// ContactUsSlice is a parsable slice of ContactUs.
type ContactUsSlice []*ContactUs

func (cu ContactUsSlice) config(cfg config) {
	for _i := range cu {
		cu[_i].config = cfg
	}
}
