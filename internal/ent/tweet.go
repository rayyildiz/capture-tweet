// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"capturetweet.com/internal/ent/schema"
	"capturetweet.com/internal/ent/tweet"
	"capturetweet.com/internal/ent/user"
	"entgo.io/ent/dialect/sql"
)

// Tweet is the model entity for the Tweet schema.
type Tweet struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FullText holds the value of the "full_text" field.
	FullText string `json:"full_text,omitempty"`
	// CaptureURL holds the value of the "capture_url" field.
	CaptureURL string `json:"capture_url,omitempty"`
	// CaptureThumbURL holds the value of the "capture_thumb_url" field.
	CaptureThumbURL string `json:"capture_thumb_url,omitempty"`
	// Lang holds the value of the "lang" field.
	Lang string `json:"lang,omitempty"`
	// FavoriteCount holds the value of the "favorite_count" field.
	FavoriteCount int `json:"favorite_count,omitempty"`
	// RetweetCount holds the value of the "retweet_count" field.
	RetweetCount int `json:"retweet_count,omitempty"`
	// AuthorID holds the value of the "author_id" field.
	AuthorID string `json:"author_id,omitempty"`
	// Resources holds the value of the "resources" field.
	Resources []schema.Resource `json:"resources,omitempty"`
	// PostedAt holds the value of the "posted_at" field.
	PostedAt time.Time `json:"posted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TweetQuery when eager-loading is set.
	Edges TweetEdges `json:"edges"`
}

// TweetEdges holds the relations/edges for other nodes in the graph.
type TweetEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TweetEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tweet) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tweet.FieldResources:
			values[i] = new([]byte)
		case tweet.FieldFavoriteCount, tweet.FieldRetweetCount:
			values[i] = new(sql.NullInt64)
		case tweet.FieldID, tweet.FieldFullText, tweet.FieldCaptureURL, tweet.FieldCaptureThumbURL, tweet.FieldLang, tweet.FieldAuthorID:
			values[i] = new(sql.NullString)
		case tweet.FieldCreatedAt, tweet.FieldUpdatedAt, tweet.FieldPostedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tweet", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tweet fields.
func (t *Tweet) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tweet.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case tweet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tweet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tweet.FieldFullText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_text", values[i])
			} else if value.Valid {
				t.FullText = value.String
			}
		case tweet.FieldCaptureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field capture_url", values[i])
			} else if value.Valid {
				t.CaptureURL = value.String
			}
		case tweet.FieldCaptureThumbURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field capture_thumb_url", values[i])
			} else if value.Valid {
				t.CaptureThumbURL = value.String
			}
		case tweet.FieldLang:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lang", values[i])
			} else if value.Valid {
				t.Lang = value.String
			}
		case tweet.FieldFavoriteCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field favorite_count", values[i])
			} else if value.Valid {
				t.FavoriteCount = int(value.Int64)
			}
		case tweet.FieldRetweetCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retweet_count", values[i])
			} else if value.Valid {
				t.RetweetCount = int(value.Int64)
			}
		case tweet.FieldAuthorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				t.AuthorID = value.String
			}
		case tweet.FieldResources:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resources", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Resources); err != nil {
					return fmt.Errorf("unmarshal field resources: %w", err)
				}
			}
		case tweet.FieldPostedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field posted_at", values[i])
			} else if value.Valid {
				t.PostedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAuthor queries the "author" edge of the Tweet entity.
func (t *Tweet) QueryAuthor() *UserQuery {
	return (&TweetClient{config: t.config}).QueryAuthor(t)
}

// Update returns a builder for updating this Tweet.
// Note that you need to call Tweet.Unwrap() before calling this method if this Tweet
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tweet) Update() *TweetUpdateOne {
	return (&TweetClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tweet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tweet) Unwrap() *Tweet {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tweet is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tweet) String() string {
	var builder strings.Builder
	builder.WriteString("Tweet(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", full_text=")
	builder.WriteString(t.FullText)
	builder.WriteString(", capture_url=")
	builder.WriteString(t.CaptureURL)
	builder.WriteString(", capture_thumb_url=")
	builder.WriteString(t.CaptureThumbURL)
	builder.WriteString(", lang=")
	builder.WriteString(t.Lang)
	builder.WriteString(", favorite_count=")
	builder.WriteString(fmt.Sprintf("%v", t.FavoriteCount))
	builder.WriteString(", retweet_count=")
	builder.WriteString(fmt.Sprintf("%v", t.RetweetCount))
	builder.WriteString(", author_id=")
	builder.WriteString(t.AuthorID)
	builder.WriteString(", resources=")
	builder.WriteString(fmt.Sprintf("%v", t.Resources))
	builder.WriteString(", posted_at=")
	builder.WriteString(t.PostedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tweets is a parsable slice of Tweet.
type Tweets []*Tweet

func (t Tweets) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
