// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"capturetweet.com/internal/ent/contactus"
	"capturetweet.com/internal/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactUsUpdate is the builder for updating ContactUs entities.
type ContactUsUpdate struct {
	config
	hooks    []Hook
	mutation *ContactUsMutation
}

// Where appends a list predicates to the ContactUsUpdate builder.
func (cuu *ContactUsUpdate) Where(ps ...predicate.ContactUs) *ContactUsUpdate {
	cuu.mutation.Where(ps...)
	return cuu
}

// SetUpdatedAt sets the "updated_at" field.
func (cuu *ContactUsUpdate) SetUpdatedAt(t time.Time) *ContactUsUpdate {
	cuu.mutation.SetUpdatedAt(t)
	return cuu
}

// SetEmail sets the "email" field.
func (cuu *ContactUsUpdate) SetEmail(s string) *ContactUsUpdate {
	cuu.mutation.SetEmail(s)
	return cuu
}

// SetFullName sets the "full_name" field.
func (cuu *ContactUsUpdate) SetFullName(s string) *ContactUsUpdate {
	cuu.mutation.SetFullName(s)
	return cuu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (cuu *ContactUsUpdate) SetNillableFullName(s *string) *ContactUsUpdate {
	if s != nil {
		cuu.SetFullName(*s)
	}
	return cuu
}

// ClearFullName clears the value of the "full_name" field.
func (cuu *ContactUsUpdate) ClearFullName() *ContactUsUpdate {
	cuu.mutation.ClearFullName()
	return cuu
}

// SetMessage sets the "message" field.
func (cuu *ContactUsUpdate) SetMessage(s string) *ContactUsUpdate {
	cuu.mutation.SetMessage(s)
	return cuu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cuu *ContactUsUpdate) SetNillableMessage(s *string) *ContactUsUpdate {
	if s != nil {
		cuu.SetMessage(*s)
	}
	return cuu
}

// ClearMessage clears the value of the "message" field.
func (cuu *ContactUsUpdate) ClearMessage() *ContactUsUpdate {
	cuu.mutation.ClearMessage()
	return cuu
}

// Mutation returns the ContactUsMutation object of the builder.
func (cuu *ContactUsUpdate) Mutation() *ContactUsMutation {
	return cuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cuu *ContactUsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cuu.defaults()
	if len(cuu.hooks) == 0 {
		if err = cuu.check(); err != nil {
			return 0, err
		}
		affected, err = cuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactUsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuu.check(); err != nil {
				return 0, err
			}
			cuu.mutation = mutation
			affected, err = cuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cuu.hooks) - 1; i >= 0; i-- {
			if cuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuu *ContactUsUpdate) SaveX(ctx context.Context) int {
	affected, err := cuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cuu *ContactUsUpdate) Exec(ctx context.Context) error {
	_, err := cuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuu *ContactUsUpdate) ExecX(ctx context.Context) {
	if err := cuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuu *ContactUsUpdate) defaults() {
	if _, ok := cuu.mutation.UpdatedAt(); !ok {
		v := contactus.UpdateDefaultUpdatedAt()
		cuu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuu *ContactUsUpdate) check() error {
	if v, ok := cuu.mutation.FullName(); ok {
		if err := contactus.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "ContactUs.full_name": %w`, err)}
		}
	}
	if v, ok := cuu.mutation.Message(); ok {
		if err := contactus.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ContactUs.message": %w`, err)}
		}
	}
	return nil
}

func (cuu *ContactUsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactus.Table,
			Columns: contactus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: contactus.FieldID,
			},
		},
	}
	if ps := cuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactus.FieldUpdatedAt,
		})
	}
	if value, ok := cuu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactus.FieldEmail,
		})
	}
	if value, ok := cuu.mutation.FullName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactus.FieldFullName,
		})
	}
	if cuu.mutation.FullNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactus.FieldFullName,
		})
	}
	if value, ok := cuu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactus.FieldMessage,
		})
	}
	if cuu.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactus.FieldMessage,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ContactUsUpdateOne is the builder for updating a single ContactUs entity.
type ContactUsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactUsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuuo *ContactUsUpdateOne) SetUpdatedAt(t time.Time) *ContactUsUpdateOne {
	cuuo.mutation.SetUpdatedAt(t)
	return cuuo
}

// SetEmail sets the "email" field.
func (cuuo *ContactUsUpdateOne) SetEmail(s string) *ContactUsUpdateOne {
	cuuo.mutation.SetEmail(s)
	return cuuo
}

// SetFullName sets the "full_name" field.
func (cuuo *ContactUsUpdateOne) SetFullName(s string) *ContactUsUpdateOne {
	cuuo.mutation.SetFullName(s)
	return cuuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (cuuo *ContactUsUpdateOne) SetNillableFullName(s *string) *ContactUsUpdateOne {
	if s != nil {
		cuuo.SetFullName(*s)
	}
	return cuuo
}

// ClearFullName clears the value of the "full_name" field.
func (cuuo *ContactUsUpdateOne) ClearFullName() *ContactUsUpdateOne {
	cuuo.mutation.ClearFullName()
	return cuuo
}

// SetMessage sets the "message" field.
func (cuuo *ContactUsUpdateOne) SetMessage(s string) *ContactUsUpdateOne {
	cuuo.mutation.SetMessage(s)
	return cuuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cuuo *ContactUsUpdateOne) SetNillableMessage(s *string) *ContactUsUpdateOne {
	if s != nil {
		cuuo.SetMessage(*s)
	}
	return cuuo
}

// ClearMessage clears the value of the "message" field.
func (cuuo *ContactUsUpdateOne) ClearMessage() *ContactUsUpdateOne {
	cuuo.mutation.ClearMessage()
	return cuuo
}

// Mutation returns the ContactUsMutation object of the builder.
func (cuuo *ContactUsUpdateOne) Mutation() *ContactUsMutation {
	return cuuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuuo *ContactUsUpdateOne) Select(field string, fields ...string) *ContactUsUpdateOne {
	cuuo.fields = append([]string{field}, fields...)
	return cuuo
}

// Save executes the query and returns the updated ContactUs entity.
func (cuuo *ContactUsUpdateOne) Save(ctx context.Context) (*ContactUs, error) {
	var (
		err  error
		node *ContactUs
	)
	cuuo.defaults()
	if len(cuuo.hooks) == 0 {
		if err = cuuo.check(); err != nil {
			return nil, err
		}
		node, err = cuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactUsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuuo.check(); err != nil {
				return nil, err
			}
			cuuo.mutation = mutation
			node, err = cuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuuo.hooks) - 1; i >= 0; i-- {
			if cuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ContactUs)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ContactUsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuuo *ContactUsUpdateOne) SaveX(ctx context.Context) *ContactUs {
	node, err := cuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuuo *ContactUsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuuo *ContactUsUpdateOne) ExecX(ctx context.Context) {
	if err := cuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuuo *ContactUsUpdateOne) defaults() {
	if _, ok := cuuo.mutation.UpdatedAt(); !ok {
		v := contactus.UpdateDefaultUpdatedAt()
		cuuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuuo *ContactUsUpdateOne) check() error {
	if v, ok := cuuo.mutation.FullName(); ok {
		if err := contactus.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "ContactUs.full_name": %w`, err)}
		}
	}
	if v, ok := cuuo.mutation.Message(); ok {
		if err := contactus.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ContactUs.message": %w`, err)}
		}
	}
	return nil
}

func (cuuo *ContactUsUpdateOne) sqlSave(ctx context.Context) (_node *ContactUs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactus.Table,
			Columns: contactus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: contactus.FieldID,
			},
		},
	}
	id, ok := cuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContactUs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactus.FieldID)
		for _, f := range fields {
			if !contactus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contactus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactus.FieldUpdatedAt,
		})
	}
	if value, ok := cuuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactus.FieldEmail,
		})
	}
	if value, ok := cuuo.mutation.FullName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactus.FieldFullName,
		})
	}
	if cuuo.mutation.FullNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactus.FieldFullName,
		})
	}
	if value, ok := cuuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactus.FieldMessage,
		})
	}
	if cuuo.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactus.FieldMessage,
		})
	}
	_node = &ContactUs{config: cuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
