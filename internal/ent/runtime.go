// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"capturetweet.com/internal/ent/schema"
	"capturetweet.com/internal/ent/tweet"
	"capturetweet.com/internal/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	tweetMixin := schema.Tweet{}.Mixin()
	tweetMixinFields0 := tweetMixin[0].Fields()
	_ = tweetMixinFields0
	tweetFields := schema.Tweet{}.Fields()
	_ = tweetFields
	// tweetDescCreatedAt is the schema descriptor for created_at field.
	tweetDescCreatedAt := tweetMixinFields0[0].Descriptor()
	// tweet.DefaultCreatedAt holds the default value on creation for the created_at field.
	tweet.DefaultCreatedAt = tweetDescCreatedAt.Default.(func() time.Time)
	// tweetDescUpdatedAt is the schema descriptor for updated_at field.
	tweetDescUpdatedAt := tweetMixinFields0[1].Descriptor()
	// tweet.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tweet.DefaultUpdatedAt = tweetDescUpdatedAt.Default.(func() time.Time)
	// tweet.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tweet.UpdateDefaultUpdatedAt = tweetDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tweetDescFullText is the schema descriptor for full_text field.
	tweetDescFullText := tweetFields[1].Descriptor()
	// tweet.FullTextValidator is a validator for the "full_text" field. It is called by the builders before save.
	tweet.FullTextValidator = func() func(string) error {
		validators := tweetDescFullText.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(full_text string) error {
			for _, fn := range fns {
				if err := fn(full_text); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tweetDescLang is the schema descriptor for lang field.
	tweetDescLang := tweetFields[4].Descriptor()
	// tweet.LangValidator is a validator for the "lang" field. It is called by the builders before save.
	tweet.LangValidator = func() func(string) error {
		validators := tweetDescLang.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(lang string) error {
			for _, fn := range fns {
				if err := fn(lang); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tweetDescFavoriteCount is the schema descriptor for favorite_count field.
	tweetDescFavoriteCount := tweetFields[5].Descriptor()
	// tweet.DefaultFavoriteCount holds the default value on creation for the favorite_count field.
	tweet.DefaultFavoriteCount = tweetDescFavoriteCount.Default.(int)
	// tweetDescRetweetCount is the schema descriptor for retweet_count field.
	tweetDescRetweetCount := tweetFields[6].Descriptor()
	// tweet.DefaultRetweetCount holds the default value on creation for the retweet_count field.
	tweet.DefaultRetweetCount = tweetDescRetweetCount.Default.(int)
	// tweetDescAuthorID is the schema descriptor for author_id field.
	tweetDescAuthorID := tweetFields[7].Descriptor()
	// tweet.AuthorIDValidator is a validator for the "author_id" field. It is called by the builders before save.
	tweet.AuthorIDValidator = tweetDescAuthorID.Validators[0].(func(string) error)
	// tweetDescID is the schema descriptor for id field.
	tweetDescID := tweetFields[0].Descriptor()
	// tweet.IDValidator is a validator for the "id" field. It is called by the builders before save.
	tweet.IDValidator = func() func(string) error {
		validators := tweetDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescScreenName is the schema descriptor for screen_name field.
	userDescScreenName := userFields[2].Descriptor()
	// user.ScreenNameValidator is a validator for the "screen_name" field. It is called by the builders before save.
	user.ScreenNameValidator = userDescScreenName.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = func() func(string) error {
		validators := userDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
