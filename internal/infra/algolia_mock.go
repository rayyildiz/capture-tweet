// Code generated by MockGen. DO NOT EDIT.
// Source: com.capturetweet/internal/infra (interfaces: IndexInterface)

// Package infra is a generated GoMock package.
package infra

import (
	search "github.com/algolia/algoliasearch-client-go/v3/algolia/search"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIndexInterface is a mock of IndexInterface interface.
type MockIndexInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIndexInterfaceMockRecorder
}

// MockIndexInterfaceMockRecorder is the mock recorder for MockIndexInterface.
type MockIndexInterfaceMockRecorder struct {
	mock *MockIndexInterface
}

// NewMockIndexInterface creates a new mock instance.
func NewMockIndexInterface(ctrl *gomock.Controller) *MockIndexInterface {
	mock := &MockIndexInterface{ctrl: ctrl}
	mock.recorder = &MockIndexInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexInterface) EXPECT() *MockIndexInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIndexInterface) Delete(arg0 ...interface{}) (search.DeleteTaskRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(search.DeleteTaskRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIndexInterfaceMockRecorder) Delete(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIndexInterface)(nil).Delete), arg0...)
}

// Exists mocks base method.
func (m *MockIndexInterface) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIndexInterfaceMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIndexInterface)(nil).Exists))
}

// GetObject mocks base method.
func (m *MockIndexInterface) GetObject(arg0 string, arg1 interface{}, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetObject indicates an expected call of GetObject.
func (mr *MockIndexInterfaceMockRecorder) GetObject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockIndexInterface)(nil).GetObject), varargs...)
}

// GetObjects mocks base method.
func (m *MockIndexInterface) GetObjects(arg0 []string, arg1 interface{}, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjects", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetObjects indicates an expected call of GetObjects.
func (mr *MockIndexInterfaceMockRecorder) GetObjects(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjects", reflect.TypeOf((*MockIndexInterface)(nil).GetObjects), varargs...)
}

// SaveObject mocks base method.
func (m *MockIndexInterface) SaveObject(arg0 interface{}, arg1 ...interface{}) (search.SaveObjectRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveObject", varargs...)
	ret0, _ := ret[0].(search.SaveObjectRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveObject indicates an expected call of SaveObject.
func (mr *MockIndexInterfaceMockRecorder) SaveObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObject", reflect.TypeOf((*MockIndexInterface)(nil).SaveObject), varargs...)
}

// SaveObjects mocks base method.
func (m *MockIndexInterface) SaveObjects(arg0 interface{}, arg1 ...interface{}) (search.GroupBatchRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveObjects", varargs...)
	ret0, _ := ret[0].(search.GroupBatchRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveObjects indicates an expected call of SaveObjects.
func (mr *MockIndexInterfaceMockRecorder) SaveObjects(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObjects", reflect.TypeOf((*MockIndexInterface)(nil).SaveObjects), varargs...)
}

// Search mocks base method.
func (m *MockIndexInterface) Search(arg0 string, arg1 ...interface{}) (search.QueryRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(search.QueryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockIndexInterfaceMockRecorder) Search(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIndexInterface)(nil).Search), varargs...)
}
