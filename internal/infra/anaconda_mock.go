// Code generated by MockGen. DO NOT EDIT.
// Source: com.capturetweet/internal/infra (interfaces: TweetAPI)

// Package infra is a generated GoMock package.
package infra

import (
	anaconda "github.com/ChimeraCoder/anaconda"
	gomock "github.com/golang/mock/gomock"
	url "net/url"
	reflect "reflect"
)

// MockTweetAPI is a mock of TweetAPI interface.
type MockTweetAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTweetAPIMockRecorder
}

// MockTweetAPIMockRecorder is the mock recorder for MockTweetAPI.
type MockTweetAPIMockRecorder struct {
	mock *MockTweetAPI
}

// NewMockTweetAPI creates a new mock instance.
func NewMockTweetAPI(ctrl *gomock.Controller) *MockTweetAPI {
	mock := &MockTweetAPI{ctrl: ctrl}
	mock.recorder = &MockTweetAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweetAPI) EXPECT() *MockTweetAPIMockRecorder {
	return m.recorder
}

// GetTweet mocks base method.
func (m *MockTweetAPI) GetTweet(arg0 int64, arg1 url.Values) (anaconda.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweet", arg0, arg1)
	ret0, _ := ret[0].(anaconda.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTweet indicates an expected call of GetTweet.
func (mr *MockTweetAPIMockRecorder) GetTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweet", reflect.TypeOf((*MockTweetAPI)(nil).GetTweet), arg0, arg1)
}
